****C++ PROGRAMMING****

[BUILD PROCESS]
* Source Code (Editor)
* Object Code (Compiler)
* Object Code + Libraries (Linker)
* Test/Debug (Debugger)
* Executable File (Build)

[INTEGRATED DEVELOPMENT ENVIRONMENT (IDE)]
* CodeLite
* CodeBlocks
* NetBeans
* Eclipse
* CLion
* Dev-C++
* KDevelop
* Visual Studio
* XCode

[COMPILER]
* MinGW GCC

[TOPICS]
* Fundamental Concepts:
   - comment
   - naming conventions
   - declaration
   - initialization
   - expression
   - statement
   - nesting
   - casting (promotion, demotion)
   - precedence
   - scoping (local, global, static)
   - preprocessor
   - variable (integer, floating-point, boolean, character, string, static, constant, pointer, reference, array, enumeration, structure, object)
   - operator
   - function
   - function arguments (by-value, by-reference)
   - function overloading
   - function as argument
   - control flow (sequence, selection, iteration, loop)
   - string
   - recursion
   - infinite loop
   - short circuit evaluation
   - lambda expression
   - associativity
   - dynamic memory allocation (stack, heap, new, delete, custom deleter)
   - inline functions

* Exception Handling: 
   - compiler errors (syntax, semantic)
   - warnings
   - linker errors
   - runtime errors
   - logical errors

* Object-Oriented Concepts: 
   - object
   - class
   - instance
   - property (attribute)
   - method
   - encapsulation
   - constructor
   - copy constructor
   - move constructor
   - destructor
   - operator overloading
   - friend functions
   - inheritance
   - composition
   - polymorphism (static/dynamic bind, override, virtual function, final)
   - abstraction (interface)
   - namespace

* Other: 
   - smart pointers
   - standard template library
   - input/output streams
   - generic programming

[KEYWORDS]
alignas, alignof, and, and_eq, asm, atomic_cancel, atomic_commit, atomic_noexcept, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, 
class, compl, concept, const, consteval, constexpr, const_cast, continue, co_await, co_return, co_yield, decltype, default, delete, do, double, dynamic_cast, 
else, enum, explicit, export, extern, false, float, for, friend, goto, if, import, inline, int, long, module, mutable, namespace, new, noexcept, not, not_eq, 
nullptr, operator, or, or_eq, private, protected, public, reflexpr, register, reinterpret_cast, requires, return, short, signed, sizeof, static, static_assert, 
static_cast, struct, switch, synchronized, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, 
volatile, wchar_t, while, xor, xor_eq

[PREPROCESSOR DIRECTIVES]
   - include
   - if/elif/else/endif
   - ifdef/ifndef/define/undef
   - line
   - error
   - pragma

[EXPLICIT NAMESPACE]
   - Scope Resolution Operator (::)
   - std::cout << "Hello World!;

[IMPLICIT NAMESPACE]
   - using namespace std; (import whole namespace)
   - using std::cout; (import specific part of namespace)

[BASIC INPUT/OUTPUT]
   - cout, cin, cerr, clog
   - insertion operator (<<); cout <<
   - extraction operator (>>); cin >>
   - cin.getline(s1, 20); (read 20 characters from standard input device.)
   - getline(cin, s1); (read until pressed enter.)
   - getline(cin, s1, ‘x’); (read until pressed x.)

[PRIMITIVE TYPES]
* character: char, char16_t, char32_t, wchar_t
* integer: signed, unsigned short int, int, long int, long long int
* floating point: float, double, long double
* boolean: bool (true, false)
* <climits> (limits of integer types) 
* <cfloat> (limits of floating-point types)

[INITIALIZATION]
* int age; (uninitialized)
* int age = 21; (c-type initialization)
* int age(21); (constructor initialization)
* int age{21}; (list initialization)
* int age{}; (zero initialization)

[CONSTANTS]
* Literal Constants: (unsigned (U), long (L), long long (LL), float (F), newline (\n), carriage return (\r), tab (\t), backspace (\b), quote (\’), double quore (\"), backslash (\\))
* Declared Constants (const)
* Constant Expressions (constexpr)
* Enumerated Constants (enum)
* Defined Constants (define)

[VECTOR]
* #include <vector>
* vector<char> v;
* vector<char> v(8); //8-elements with initial value 0.
* vector<char> v(8, 100); //8-elements with initial value 100.
* vector<char> v{‘a’, ‘e’, ‘ý’, ‘i’, ‘o’, ‘ö’, ‘u’, ‘ü’}; //vector containing vowels.
* v[10]; //value of 11th element of the vector.
* v.at(10); //value of 11th element of the vector.
* v.push_back(‘a’); //add a new element at the end of the vector.
* v.size(); //number of elements in the vector.

[MULTIPLE ASSIGNMENT]
* num1 = num2 = 1000;

[TYPE COERCION]
* lower op higher (promotion, lower promoted to higher, example: int to long)
* lower = higher (demotion, higher demoted to lower, example: long to int)

[BOOLEAN REPRESENTATION]
* cout << std::boolalpha; //true, false
* cout << std::noboolalpha; //1, 0

[THREE-WAY COMPARISION]
* A<=>B
* A<B :-1
* A=B : 0
* A>B : 1

[PROGRAM FLOW CONTROL]
* Sequence(if-else)
* Selection(switch-case-default)
* Iteration(for, while, do-while)

[RANGE BASED FOR LOOP]
* for(int element: array)

[STANDARD PRECISION]
* #include <iomanip>
* cout << fixed << setprecision(2); //set number of digits after decimal point.
* cout.fixed();
* cout.precision(2);

[STATIC CASTING]
* static_cast<double>(var1)/var2 //error check available.
* (double)var1/var2 //no error check. possible data loss.

[CHARACTER]
* #include <cctype>
* isalpha, isnum, isalnum, isupper, islower, isprint, ispunct, isspace, tolower, toupper

[C-STYLE STRING]
* #include <cstring> //c-style string operations
* functions: strcpy, strcat, strcmp, strlen
* char s[8]{"Macit"}; //fixed 8-bytes are allocated, 5 is used.
* cin.getline(s, 20); //store 20 characters from standard input into s.

[C++ STRING]
* #include <string> //c++ string operations
* std::string //using namespace std;
* methods: substr, find, erase, clear, length
* string s1; //empty string
* string s2{"Foo Bar So Hard", 15};
* string s3{s2, 3}; //first 3 elements. Foo.
* string s4{s2, 5, 3}; //five elements after 3rd position. Bar.
* string s5(10, 'B'); //ten times B.
* s[0] = s.at(0) //element indexing. similar to vector.
* s1 + s2, s1 < s2 //arithmetic and comparision operations are available.

[FUNCTION]
* prototype
* definition
* parameters (value, reference, default)
* return type
* overloading (same return type, single default argument)
* inline implementation
* auto return type
* definition: return type + name + parameters + body
* formal parameter: f(int x)
* actual parameter (argument): f(10)

[SCOPING]
* local
* global
* static

[STACK]
* last in first out (LIFO)
* push: put on top.
* pop: get from top.
* stack overflow
* function activation record
* local variables
* function parameters

[POINTER]
* int n;
* int *p; //address to anywhere.
* int *p{nullptr}; //address to nowhere.
* p = nullptr; //address to nowhere.
* p = &n1; //reference, hold address of n1.
* p = &n2; //dereference, release address of n1, hold adress of n2.
* n: value of n
* *p: value of n
* &n: address of n
* p: address of n
* (p + 1): //increment address by size of type, not by 1.
* sizeof n: size of n in bytes.
* sizeof p: size of p in bytes. (address holder size)

[POINTER TO ARRAY]
* int a[];
* *a: a[0] (value of first element)
* a: &a[0] (address of first element)
* *(a + 1) = a[1] (offset/subscript notations)

[POINTER TO CONSTANT]
* const int* p{&n}
* *p = 200; //error
* p = &n2; //ok

[CONSTANT POINTER TO VARIABLE]
* const* int p{&n}
* *p = 200; //ok
* p = &n2; //error

[CONSTANT POINTER TO CONSTANT]
* const* int *p{&n} //constant pointer to constant
* *p = 200; //error
* p = &n2; //error

[POINTER ARITHMETIC]
* p++ (increment adress by sizeof type.)
* p-- (decrement adress by sizeof type.)
* p+1 (increment adress by 1 * sizeof type.)
* p-1 (decrement adress by 1 * sizeof type.)
* p2-p1 (difference of two addresses in bytes.)
* p1==p2 (address equality.)
* *p1==*p2 (value equality.)

[DYNAMIC MEMORY ALLOCATION]
* int *p{nullptr};
* p = new int; //allocate space on heap in sizeof one integer.
* delete p; //free allocated space.
* p = new int[size]; //allocate integer array on heap
* delete [] p; //free allocated space

[L-VALUE REFERENCE]
* int n{100};
* int &r{n}; //whatever change made on r reflects to n.

[R-VALUE REFERENCE]
* x = 100;
* x: l-Value (addressable, assignable, modifiable, reference)
* 100: r-Value (non-addressable, non-assignable, literal, non-reference)
* int &l_ref = x (l-value reference)
* int &&r_ref = 300 (r-value reference)
* int &&r_ref = x (error)

[ADVANTAGES of OBJECT-ORIENTED PROGRAMMING]
* understandable
* maintainable
* extendable
* easier debugging and testing
* reusable
* unfragile
* abstraction
* encapsulation
* information hiding
* inheritance
* method overriding
* polymorphism

[STRUCT]
* member is public by default.
* passive object.
* no method.

[CLASS]
* attribute (data)
* method (function)
   - prototype
   - declaration
   - implementation (inline/outside)
* object (instance of class)
* access modifiers (encapsulation)
   - public (visible everywhere)
   - private (visible by self/friend)
   - protected (visible by self/derived)
* constructor
   - initialization
   - overloading
   - delegating
   - copy constructor (shallow copy, deep copy)
   - move constructor
* destructor
* constant method
* static members
* friend (function/method/class)
* operator overloading
* function overloading
* composition
* inheritance
* polymorphism
   - static binding (compile-time, early)
   - dynamic binding (run-time, late)
* function override
   - abstract class
   - base class pointer
   - base class reference
   - virtual function
   - pure virtual function
   - virtual destructor
   - finalizing
   - interface

[INCLUDE GUARD]
#ifndef _ACCOUNT_H
#define _ACCOUNT_H
//Account Class Declaration
#endif

#pragma once 

[CASES of OBJECT COPYING]
* pass by value parameter to a function.
* return value from function.
* constructing new object from existing object.

[NONE OVERLOADABLE OPERATORS]
::, :?, .*, ., sizeof

[Inheritance]
access modifiers: public/private(default)/protected
protected: accessible from base/derived classes, not accessible by objects of base/derived classes
public inheritance: public:public, protected:protected, private:not accessible
protected inheritance: public:protected, protected:protected, private: not accessible
private inheritance: public:private, protected:private, private: not accessible
derived class doesn’t inherit: base class constructor/destructor/overloaded assignment operators/friend functions
multiple inheritance: derived:base1, base2, ... 

[Method Overriding]
override base class virtual functions (virtual).
exactly same signature (overriding, dynamic).
same name different signature (redefinition, static).
override: compiler alerts if signatures are not same.

[Finalizing (final)]
restrain class from being derived by another class.
restrain method to be overriden in derived class.

[Abstract Class/Pure Virtual Function]
abstract class cannot be instantiated.
all methods should be declared as pure virtual functions.
if class derived from abstract class is not overrided it is also an abstract class, otherwise concrete class.
virtual void function() = 0;  //pure virtual function

[Interface]
single implementation for multiple overridden methods

[Smart Pointers]
#include <memory>
Types: unique (unique_ptr), shared (shared_ptr), weak (weak_ptr), auto (auto_ptr)
Features: objects, heap allocation, automatic deletion, get(), reset(), Resource Acquisition Is Initialization (RAII)
Unique: make_unique<type>(), unique pointing, one-to-one, no assignment, no copy, move
Shared: make_shared<type>(), use_count(), shared pointing, multiple-to-one, assignment, copy, move, counter
Weak: shared_ptr, no counter, temporary visit

[Exception Handling]
Reasons: insufficient/missing resources, invalid operations, range violations, underflows/overflows, illegal data, ... 
Stages: exception, throwing (raising) exception, catching (handling) exception
Members: throw, try, catch(Exception ex)
stack-unwinding, user-defined exceptions, class-level exceptions, exception class inheritance (std::exception)

[Standart Library Exception Class Hierarchy]
* Exception
   - bad_typeid
   - bad_cast(bad_any_cast)
   - bad_weak_ptr
   - bad_function_call
   - bad_exception
   - bad_alloc(bad_array_new_length, bad_array_length)
   - bad_optional_access
   - bad_variant_access
   - runtime error
      * domain_error
      * out_of_range
      * length_error
      * invalid_argument
      * future_error
   - logic error
      * overflow_error
      * underflow_error
      * range_error
      * regex_error
      * system_error(ios_base_faliure, filesystem_error)

[I/O and Streams]
Headers: iostream (Stream), fstream (File Stream), sstream (String Stream), iomanip (Stream Manipulation)
Classes: ios (Basic), File Stream (fstream, ifstream, ofstream), String (stringstream, istringstream, ostringstream)
Global Stream Objects: cin (Input Device), cout (Output Device), cerr (Error Device), clog (Log Device)
Common Stream Manipulators: Boolean (boolalpha, noboolalpha), Integer (dec, hex, oct, showbase, noshowbase, showpos, noshowpos, uppercase, nouppercase), Floating Point (fixed, scientific, setprecision, showpoint, noshowpoint, showpos, noshowpos, uppercase, nouppercase), Field Width/Justification/Fill (setw, left, right, internal, setfill), Others (endl, flush, skipws, noskipws, ws)
File Stream: ifstream, open(), is_open(), eof(), get(), put(), getline(), close(), ios::binary/text
File Write: ofstream, ios::trunc/app/ate

[Standart Template Library (STL)]
* Generic/Meta Programming
   - Preprocessor Macros (#define)
   - Function Templates
   - Class Templates
* STL Containers
   - Sequence (array, vector, list, forward_list, deque)
   - Associative (set, multiset, map, multimap)
   - Adapter (stack, queue, priority queue)
* STL Iterators (forward, reverse, by value, by reference, constant)
   - Input
   - Output
   - Forward
   - Bi-Directional
   - Random Access
* STL Algorithms (find, max, count, count_if, accumulate, sort, all_of, transform, ...)

#include <utility> //std::pair
#include <algorithm> // sort, reverse, accumulate, max, …
less than <, equality == operators must be implemented for STL objects.

[Iterators]
iterator (begin/end), reverse iterator (rbegin/rend), constant iterator (cbegin/cend), constant reverse iterator (crbegin/crend)
operations with iterators: ++, --, =, *, ->, ==, !=, +, -, +=, -=, <, <=, >, >=
iterators must be declared based on container type: container_type::iterator_type iterator_name;

[Common Container Features]
default/overloaded/copy/move constructors, destructor, copy/move assignment, size, empty, insert, comparision operators, swap, erase, clear

[Array]
#include <array>
std::array
Features: fixed size, direct access, raw array, all iterators
Members: size, at, [], front, back, empty, max_size, fill, swap, data

[Vector]
#include <vector>
std::vector
Features: dynamic size, direct access, rapid insertion/deletion, element insertion/removal, all iterators
Members: front, back, push_back, pop_back, emplace_back, size, capacity, max_size, at, [], empty, swap, sort, find, insert, shrink_to_fit, reserve, back_inserter, copy, copy_if

[Deque]
#include <deque>
std::deque
Features: dynamic size, direct access, rapid insertion/deletion, element insertion/removal, all iterators
Members: front, back, push_back, push_front, pop_back, pop_front, emplace_back, emplace_front, size, max_size, at, [], clear

[List/Forward List]
#include <list>
std::list
Features: sequence, non contiguous, bidirectional, dynamic size, no direct access, rapid insert/delete, all iterators
Members: size, max_size, front, back, push_back, push_front, pop_back, pop_front, emplace_back, emplace_front, insert, erase, resize, find

#include <forward_list>
std::forward_list
Features: unidirectional, no reverse iterators (others common)
Members: front, max_size, push_front, pop_front, emplace_front, insert_after, emplace_after, erase_after, resize

[Associative Containers]
sets (set, multiset, unorderer_set, unordered_multiset)
maps (map, multimap, unordered_map, unordered_multimap)

[Set]
#include <set>
std::set //no duplicate elements
std::multiset //duplicate elements
Features: key, ordered, all iterators
Members: size, max_size, insert, erase, begin, end, count, clear, empty, emplace

#include <unordered_set>
std::unordered_set //no duplicate elements
std::unordered_multiset //duplicate elements
Features: unordered, no modifiable elements, no reverse iterators

[Map]
#include <map>
std::map //no duplicate elements
std::multimap //duplicate elements
std::unordered_map //unordererd, no duplicate elements, no reverse iterators
std::unordered_multimap //unordered, duplicate elements, no reverse iterators
Features: key-value pairs, unique keys, direct element access, all iterators
Members: size, max_size, insert, make_pair, at, [], erase, find, begin, end, count, clear, empty

[Stack]
#include <stack>
std::stack
Features: last-in first-out, vector/list/deque adapters, no iterators
Members: push, pop, top, empty, size

[Queue]
#include <queue>
std::queue
Features: first-in first-out, list/deque adapters, no iterators
Members: push, pop, front, back, empty, size

[Priority Queue]
#include <queue>
std::priority_queue
Features: priority, largest at front, default type vector, no iterators
Members: push, pop (greatest), top (greatest), empty, size



